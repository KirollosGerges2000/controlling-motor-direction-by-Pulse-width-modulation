
control motor with PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000014e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a5  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b5  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000268  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <PWM>:
 * Author : Kirollos Gerges
 */ 
// PWM function that declare about Pulse width modulation from 0 to 255 and direction of motor 
void PWM(unsigned int i,unsigned char c)
{
	OCR0=i;   // OCRO register for PWM
  7c:	8c bf       	out	0x3c, r24	; 60
	PORTC=c;   //For direction
  7e:	65 bb       	out	0x15, r22	; 21
  80:	08 95       	ret

00000082 <PROCESS>:
#include "prototypes.h"  // calling prototypes
u8 i=0;  // deceleration and initialization value with 0

int PROCESS(void)
{
	INPUT_MODULE(DDRB,1);  //PB1 input pin for  direction control 1
  82:	87 b3       	in	r24, 0x17	; 23
  84:	8d 7f       	andi	r24, 0xFD	; 253
  86:	87 bb       	out	0x17, r24	; 23
	INPUT_MODULE(DDRB,2);  //PB2 input pin for  direction control 2
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	87 bb       	out	0x17, r24	; 23
	INPUT_MODULE(DDRB,3);  //PB3 Enable of PWM
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;  //Define as PORT C as an output port
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 bb       	out	0x14, r24	; 20
	i=0;   //Duty cycle determination
  98:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	OCR0=i;    //for  duty cycle
  9c:	1c be       	out	0x3c, r1	; 60
	TCCR0=0x61;   // phase correct PWM
  9e:	81 e6       	ldi	r24, 0x61	; 97
  a0:	83 bf       	out	0x33, r24	; 51
	/*  Super loop to execute infinitely */
	while (1)
	{
		if(sw_CW == 0)            // In condition the clockwise button is pressed
  a2:	b0 99       	sbic	0x16, 0	; 22
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <PROCESS+0x30>
		{
			PWM(128,0x01);  // 50% of duty cycle will be activate in Clock wise direction PWM(128/255=50%,"0000 0001")
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <PWM>
  b0:	f8 cf       	rjmp	.-16     	; 0xa2 <PROCESS+0x20>
		}
		
		else if (sw_CCW == 0 )     // In condition the Anti clockwise button is pressed
  b2:	b1 99       	sbic	0x16, 1	; 22
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <PROCESS+0x40>
		{
			PWM(128,0x02);      // 50% of duty cycle will be activate in Anti Clock wise direction PWM(128/255=50%,"0000 0010")
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 3e 00 	call	0x7c	; 0x7c <PWM>
  c0:	f0 cf       	rjmp	.-32     	; 0xa2 <PROCESS+0x20>
		}
		
		else if(sw_stop == 0 )       // In condition the stop button is pressed
  c2:	b2 99       	sbic	0x16, 2	; 22
  c4:	ee cf       	rjmp	.-36     	; 0xa2 <PROCESS+0x20>
		{
			PWM(0,0x00);    // 0% of duty cycle will be activate in stop condition PWM(0/255=0%,"0000 0000")
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <PWM>
  d0:	e8 cf       	rjmp	.-48     	; 0xa2 <PROCESS+0x20>

000000d2 <main>:

#include "control motors with PWM.c"

int main(void)
{
	PROCESS();
  d2:	0e 94 41 00 	call	0x82	; 0x82 <PROCESS>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
